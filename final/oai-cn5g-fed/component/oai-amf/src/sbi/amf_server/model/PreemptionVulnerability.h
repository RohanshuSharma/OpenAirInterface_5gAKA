/**
 * Namf_Communication
 * AMF Communication Service Â© 2022, 3GPP Organizational Partners (ARIB, ATIS,
 * CCSA, ETSI, TSDSI, TTA, TTC). All rights reserved.
 *
 * The version of the OpenAPI document: 1.1.8
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */
/*
 * PreemptionVulnerability.h
 *
 *
 */

#ifndef PreemptionVulnerability_H_
#define PreemptionVulnerability_H_

#include "PreemptionVulnerability_anyOf.h"
#include <nlohmann/json.hpp>

namespace oai::amf::model {

/// <summary>
///
/// </summary>
class PreemptionVulnerability {
 public:
  PreemptionVulnerability();
  virtual ~PreemptionVulnerability() = default;

  /// <summary>
  /// Validate the current data in the model. Throws a ValidationException on
  /// failure.
  /// </summary>
  void validate() const;

  /// <summary>
  /// Validate the current data in the model. Returns false on error and writes
  /// an error message into the given stringstream.
  /// </summary>
  bool validate(std::stringstream& msg) const;

  /// <summary>
  /// Helper overload for validate. Used when one model stores another model and
  /// calls it's validate. Not meant to be called outside that case.
  /// </summary>
  bool validate(std::stringstream& msg, const std::string& pathPrefix) const;

  bool operator==(const PreemptionVulnerability& rhs) const;
  bool operator!=(const PreemptionVulnerability& rhs) const;

  /////////////////////////////////////////////
  /// PreemptionVulnerability members

  PreemptionVulnerability_anyOf getValue() const;
  void setValue(PreemptionVulnerability_anyOf value);
  PreemptionVulnerability_anyOf::ePreemptionVulnerability_anyOf getEnumValue()
      const;
  void setEnumValue(
      PreemptionVulnerability_anyOf::ePreemptionVulnerability_anyOf value);
  friend void to_json(nlohmann::json& j, const PreemptionVulnerability& o);
  friend void from_json(const nlohmann::json& j, PreemptionVulnerability& o);
  friend void to_json(
      nlohmann::json& j, const PreemptionVulnerability_anyOf& o);
  friend void from_json(
      const nlohmann::json& j, PreemptionVulnerability_anyOf& o);

 protected:
  PreemptionVulnerability_anyOf m_value;
};

}  // namespace oai::amf::model

#endif /* PreemptionVulnerability_H_ */
